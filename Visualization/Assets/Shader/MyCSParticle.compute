#pragma kernel MyCSParticle

struct Particle
{
	float3 position;
	float3 dir;
	float velocity;
	float life;
};

RWStructuredBuffer<Particle> particleBuffer;

uint index = 0;
float deltaTime;
bool clicked = false;

float nrand(float2 uv)
{
	return frac(sin(dot(uv, float2(12.9898, 87.233)))*43758.5453);
}

uint rng_state;
//uint : 양수

uint rand_xorshift()
{
	rng_state ^= (rng_state << 13);
	rng_state ^= (rng_state >> 17);
	rng_state ^= (rng_state << 5);
	return rng_state;
}

[numthreads(256, 1, 1)] 

void MyCSParticle(uint3 id : SV_DispatchThreadID)
{
	if (particleBuffer[id.x].life > 0) {
		particleBuffer[id.x].life -= deltaTime;
		particleBuffer[id.x].position += particleBuffer[id.x].dir * particleBuffer[id.x].velocity 
			* (1 - particleBuffer[id.x].life * 0.25) * deltaTime
			+ float3(0, -1.5, 0) * deltaTime * (1 - particleBuffer[id.x].life * 0.25);
	}

	if (clicked) {
		if (id.x >= index * 10000 && id.x < (index+1)*10000) {
			particleBuffer[id.x].life = float(rand_xorshift()) * (1.0 / 4294967296.0)*2.5 + 1.5;
			particleBuffer[id.x].position = float3(0, 0, 0);
		}
	}
}