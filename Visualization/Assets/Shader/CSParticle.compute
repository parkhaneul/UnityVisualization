// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSParticle

struct Particle
{
	float3 position;
	float3 velocity;
	float life;
};

RWStructuredBuffer<Particle> particleBuffer;
//버퍼를 만들어놓고 옮겨서 사용. (버퍼를 옮길때마다 Drawcall발생)

float deltaTime;
float2 mousePosition;

float nrand(float2 uv) 
{
	return frac(sin(dot(uv, float2(12.9898, 87.233)))*43758.5453);
}

uint rng_state;
//uint : 양수

uint rand_xorshift()
{
	rng_state ^= (rng_state << 13);
	rng_state ^= (rng_state >> 17);
	rng_state ^= (rng_state << 5);
	return rng_state;
}

[numthreads(256, 1, 1)] //GPU에서 몇개의 스레드를 사용하여 처리할 지 정함.

//버퍼 안에 있는 것들을 처리.
void CSParticle(uint3 id : SV_DispatchThreadID)
{
	particleBuffer[id.x].life -= deltaTime;

	float3 delta = float3(mousePosition.xy, 3) - particleBuffer[id.x].position;
	float3 dir = normalize(delta);

	particleBuffer[id.x].velocity += dir;
	particleBuffer[id.x].position += particleBuffer[id.x].velocity * deltaTime;

	if (particleBuffer[id.x].life < 0)
	{
		rng_state = id.x;
		float f0 = float(rand_xorshift()) * (1.0 / 4294967296.0) - 0.5;
		float f1 = float(rand_xorshift()) * (1.0 / 4294967296.0) - 0.5;
		float f2 = float(rand_xorshift()) * (1.0 / 4294967296.0) - 0.5;
		float3 normalF3 = normalize(float3(f0, f1, f2)) * 0.8f;
		normalF3 *= float(rand_xorshift()) * (1.0 / 4294967296.0);
		particleBuffer[id.x].position = float3(normalF3.x + mousePosition.x, normalF3.y + mousePosition.y, normalF3.z + 3.0);
		// reset the life of this particle
		particleBuffer[id.x].life = 4;
		particleBuffer[id.x].velocity = float3(0, 0, 0);
	}
}