// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel dataVisualization

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
struct Particle{
    float4 _color;
    float3 position;
    uint inCluster;
};

struct Cluster
{
    float3 position;
    float4 _color;
    uint index;
}

uint axisCount;

struct Weight{
    int propertyIndex;
    float weight;   
};

struct calculAxis{
    float4 _color;
    float3 position;
};

RWStructuredBuffer<Particle> particleBuffer;
RWStructuredBuffer<Cluster> clusterBuffer;
RWStructuredBuffer<float> floatBuffer;
RWStructuredBuffer<calculAxis> axisBuffer;
RWStructuredBuffer<Weight> weightBuffer;

[numthreads(1024,1,1)]
void dataVisualization(uint3 id : SV_DispatchThreadID)
{
    [loop][allow_uav_condition]
    for (uint i = 0; i < axisCount; i++)
    {
        float3 position = axisBuffer[i].position * (axisCount-1);
        float4 color = axisBuffer[i]._color;
        for(int j = 0; j < 10; j++){
            particleBuffer[id.x].position += position * floatBuffer[id.x * 50 + weightBuffer[i * 10 + j].propertyIndex] * weightBuffer[i * 10 + j].weight;
            particleBuffer[id.x]._color += color * floatBuffer[id.x * 50 + weightBuffer[i * 10 + j].propertyIndex] * weightBuffer[i * 10 + j].weight;
        }
    }
    
    particleBuffer[id.x].position = particleBuffer[id.x].position / axisCount;
    particleBuffer[id.x]._color = particleBuffer[id.x]._color / axisCount;
}

[numthreads(1024,1,1)]
void Clustering(uint3 id : SV_DispatchThreadID){
    float3 position = particleBuffer[id.x].position;
    float min = 100000000000;
    uint index = 0;
    [loop][allow_uav_condition]
    for(uint i = 0; i < k; i++)//k is unit
    {
        if(distance(position, clusterBuffer[i].position) < min){
            min = distance(position, clusterBuffer[i].position)
            index = i;
        }
        //거리를 젠다
    }
    particleBuffer[id.x].inCluster = index;
    clusterBuffer[index].index++;
    clusterBuffer[index].position += particleBuffer[id.x].position;
}

[numthreads(1024,1,1)]
void Coloring(uint3 id : SV_DispatchThreadID){
    uint index = particleBuffer[id.x].inCluster;
    particleBuffer[id.x]._color = clusterBuffer[index]._color;
}