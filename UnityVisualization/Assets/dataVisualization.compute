// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel dataVisualization
// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
struct Data{
    float4 _color;
    float3 position;
};

uint axisCount;

struct Axis{
    float4 _color;
    float3 _vector;
};

struct Weight{
    int propertyIndex;
    float weight;   
};

RWStructuredBuffer<Data> computeBuffer;
RWStructuredBuffer<float> floatBuffer;
RWStructuredBuffer<Axis> axisBuffer;
RWStructuredBuffer<Weight> weightBuffer;

uint rng_state;

uint rand_xorshift()
{
    rng_state ^= (rng_state << 13);
    rng_state ^= (rng_state >> 17);
    rng_state ^= (rng_state << 5);
    return rng_state;
}


[numthreads(32,32,1)]
void dataVisualization(uint3 id : SV_DispatchThreadID)
{
    for(int i = 0; i < axisCount; i++){
        float3 position = float3(0,0,0);
        float3 v = axisBuffer[i]._vector;
        for(int j = 0; j < 10; j++){
            position += v; //v * floatBuffer[id.x * 50 + weightBuffer[i * 10 + j].propertyIndex];// * weightBuffer[i * 10 + j].weight;
        }
        computeBuffer[id.x].position = position * 10;
    }
}
