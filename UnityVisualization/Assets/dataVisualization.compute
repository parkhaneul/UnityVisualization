// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel dataVisualization

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
struct Data{
    float4 _color;
    float3 position;
};

uint axisCount;

struct Axis{
    float4 _color;
    float3 _vector;
};

struct Weight{
    int propertyIndex;
    float weight;   
};

RWStructuredBuffer<Data> computeBuffer;
RWStructuredBuffer<float> floatBuffer;
RWStructuredBuffer<Axis> axisBuffer;
RWStructuredBuffer<Weight> weightBuffer;

[numthreads(8,8,8)]
void dataVisualization(uint3 id : SV_DispatchThreadID)
{
    //for(int i = 0; i < axisCount; i++){
    //    float3 position = axisBuffer[i]._vector;
    //    for(int j = 0; j < 10; j++){
    //        computeBuffer[id.x].position += position * floatBuffer[id.x * 200 + weightBuffer[i * 10 + j].propertyIndex] * weightBuffer[i * 10 + j].weight;
    //    }
    //    computeBuffer[id.x]._color += axisBuffer[i]._color;
    //}
    //computeBuffer[id.x].position = computeBuffer[id.x].position / axisCount;
    for(int i = 0; i < axisCount; i++){
        computeBuffer[id.x].position += axisBuffer[i]._vector;
        computeBuffer[id.x]._color += axisBuffer[i]._color;
    }
    computeBuffer[id.x]._color = computeBuffer[id.x]._color / axisCount;
}
